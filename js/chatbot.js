// ============ CHATBOT.JS - SEOUL KIMCHI AI (FIXED) ============

// AI Responses Database
const chatResponses = {
    'language': 'vi',
    
    'track|theo d√µi|ƒë∆°n h√†ng|tracking': [
        'üì¶ THEO D√ïI ƒê∆†N H√ÄNG:\nNh·∫≠p m√£ ƒë∆°n h√†ng (VD: SK12345)\nHo·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë·∫∑t h√†ng.',
        'üîç Ki·ªÉm tra ƒë∆°n h√†ng:\n1. M√£ ƒë∆°n\n2. SƒêT\n3. Email\nCh·ªçn c√°ch b·∫°n mu·ªën ki·ªÉm tra!'
    ],

    'g·ª£i √Ω|recommend|suggestion': [
        'üéØ G·ª¢I √ù CHO B·∫†N:\n1. M·ªõi d√πng: Kimchi C·∫£i Th·∫£o C·∫Øt\n2. Cay nh·∫π: Kimchi C·ªß C·∫£i\n3. ƒÇn li·ªÅn: Tteokbokki Cheese\nTh√≠ch lo·∫°i n√†o?',
        'üë®‚Äçüç≥ TOP B√ÅN CH·∫†Y:\n‚Ä¢ Kimchi C·∫£i Th·∫£o\n‚Ä¢ Tteokbokki Cheese\n‚Ä¢ ·ªöt B·ªôt H√†n Qu·ªëc\nMu·ªën t∆∞ v·∫•n chi ti·∫øt?'
    ],
    
    'xem s·∫£n ph·∫©m|s·∫£n ph·∫©m g√¨': [
        'üå∂Ô∏è Ch√∫ng t√¥i c√≥ 12 lo·∫°i s·∫£n ph·∫©m:\n‚Ä¢ Kimchi C·∫£i Th·∫£o (145K)\n‚Ä¢ Tteokbokki Cheese (110K)\n‚Ä¢ Gia v·ªã H√†n Qu·ªëc\nB·∫°n quan t√¢m lo·∫°i n√†o?',
        'S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t: Kimchi C·∫£i Th·∫£o C·∫Øt ü•¨\nGi√°: 145K | 100% t·ª± nhi√™n, HACCP'
    ],

    'gi√°|bao nhi√™u|price': [
        'üí∞ Gi√° kim chi t·ª´ 65K-155K\n‚Ä¢ Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn t·ª´ 500K\n‚Ä¢ Gi·∫£m 10% n·∫øu mua t·ª´ 3 l·ªç\nB·∫°n mu·ªën bi·∫øt s·∫£n ph·∫©m n√†o c·ª• th·ªÉ?',
        'Tteokbokki: 95-110K\nKimchi: 65-155K\nGia v·ªã: 65-85K\nLi√™n h·ªá ƒë·ªÉ bi·∫øt khuy·∫øn m√£i! üéâ'
    ],

    'giao h√†ng|ship|delivery': [
        'üöö Giao to√†n qu·ªëc 1-3 ng√†y\n‚Ä¢ Mi·ªÖn ph√≠ t·ª´ 500K\n‚Ä¢ H·ªó tr·ª£: GHN, GHTK, COD\n‚Ä¢ ƒê√≥ng g√≥i c·∫©n th·∫≠n, an to√†n',
        'ƒê·ªãa ch·ªâ giao c·ªßa b·∫°n l√† ·ªü ƒë√¢u? T√¥i s·∫Ω t√≠nh ph√≠ v·∫≠n chuy·ªÉn.'
    ],

    'li√™n h·ªá|phone|s·ªë ƒëi·ªán tho·∫°i': [
        '‚òéÔ∏è 034 4100 374 (VN)\nüì± 077 7358 188 (Korea)\nüìß hanfoodvinahjc@gmail.com\nüè¢ B4/118M T√¢n Li√™m, HCM\nGi·ªù: Th·ª© 2-7: 07:00-17:00',
        'Li√™n h·ªá t√¥i qua:\n‚Ä¢ Chat: Nh·∫Øn ·ªü ƒë√¢y\n‚Ä¢ Phone: 034 4100 374\n‚Ä¢ Email: hanfoodvinahjc@gmail.com'
    ],

    's·ª©c kh·ªèe|health|l·ª£i √≠ch': [
        'üí™ L·ª£i √çch Kimchi:\n‚úÖ H·ªó tr·ª£ ti√™u h√≥a\n‚úÖ TƒÉng mi·ªÖn d·ªãch\n‚úÖ Gi√†u probiotics\n‚úÖ Ch·ªëng vi√™m\n‚úÖ B·∫£o v·ªá tim m·∫°ch',
        'Kimchi c√≥: Vitamin, Kho√°ng ch·∫•t, Probiotics\nT·ªët cho: ƒê∆∞·ªùng ru·ªôt, H·ªá mi·ªÖn d·ªãch, C√¢n n·∫∑ng'
    ],

    'ƒë·∫∑t h√†ng|order|mua': [
        'üõí C√°ch ƒë·∫∑t h√†ng:\n1Ô∏è‚É£ Ch·ªçn s·∫£n ph·∫©m\n2Ô∏è‚É£ G·ªçi ho·∫∑c nh·∫Øn\n3Ô∏è‚É£ X√°c nh·∫≠n ƒë∆°n\n4Ô∏è‚É£ Thanh to√°n\n5Ô∏è‚É£ Giao h√†ng\n\nüìû 034 4100 374',
        'B·∫°n mu·ªën ƒë·∫∑t bao nhi√™u s·∫£n ph·∫©m? T√¥i s·∫Ω t√≠nh ti·ªÅn cho b·∫°n!'
    ],

    'b·∫£o qu·∫£n|storage': [
        '‚ùÑÔ∏è B·∫£o qu·∫£n Kimchi:\n‚Ä¢ T·ªß l·∫°nh 2-8¬∞C: 2-3 th√°ng\n‚Ä¢ Nhi·ªát ƒë·ªô ph√≤ng: 1 th√°ng\n‚Ä¢ D√πng c√¥ng c·ª• s·∫°ch\n‚Ä¢ Kh√¥ng ƒë·ªÉ g·∫ßn th·ª±c ƒÉn kh√°c',
        'ƒê·ªÉ t·ªß l·∫°nh ngƒÉn m√°t, l·ªç ƒë√≥ng k√≠n. S·∫Ω t∆∞∆°i 2-3 th√°ng!'
    ],

    'ch·ª©ng nh·∫≠n|haccp|certificate': [
        'üèÜ Ch·ª©ng nh·∫≠n:\n‚úÖ HACCP CODEX 2020\n‚úÖ An to√†n th·ª±c ph·∫©m\n‚úÖ QCVN 01:2011/BYT\nT·∫•t c·∫£ t·ª´ B·ªô Y T·∫ø!',
        '100% s·∫£n ph·∫©m t·ª± nhi√™n, kh√¥ng h√≥a ch·∫•t t·ªïng h·ª£p'
    ],

    'ch√†o|hello|xin ch√†o': [
        'Xin ch√†o! üëã M√¨nh l√† Seoul Bot\nH·ªó tr·ª£ 24/7 - C√≥ g√¨ t√¥i c√≥ th·ªÉ gi√∫p?',
        'Ch√†o b·∫°n! üòä C·∫ßn gi√∫p g√¨ kh√¥ng?'
    ],

    'c·∫£m ∆°n|thanks|thank you': [
        'Kh√¥ng c√≥ g√¨! üòä C√≤n g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p?',
        'Vui l√≤ng! H·ªó tr·ª£ th√™m b·∫•t k·ª≥ l√∫c n√†o üí¨'
    ],

    't·∫°m bi·ªát|bye|goodbye': [
        'T·∫°m bi·ªát! üëã C·∫£m ∆°n ƒë√£ gh√© thƒÉm Seoul Kimchi üå∂Ô∏è',
        'H·∫πn g·∫∑p b·∫°n l·∫ßn sau! üòä'
    ]
};

// Utilities
const rIC = window.requestIdleCallback || function (cb) { return setTimeout(cb, 200); };

function debounce(fn, wait = 250) {
    let t;
    return function (...args) {
        clearTimeout(t);
        t = setTimeout(() => fn.apply(this, args), wait);
    };
}

// DOM Cache
const DOM = {
    chatMessages: null,
    chatInput: null,
    sendButton: null,
    voiceBtn: null
};

function cacheDOM() {
    DOM.chatMessages = document.getElementById('chatMessages');
    DOM.chatInput = document.getElementById('chatInput');
    DOM.sendButton = document.getElementById('sendButton');
    DOM.voiceBtn = document.getElementById('voiceBtn');
}

// Ensure chat widget exists
function ensureChatWidgetExists() {
    try {
        if (document.getElementById('chatWidget')) return;

        const wrapper = document.createElement('div');
        wrapper.id = 'chatWidget';
        wrapper.style.cssText = `
            position: fixed !important;
            right: 32px !important;
            bottom: 32px !important;
            width: 360px !important;
            max-width: 90vw !important;
            background: white !important;
            border-radius: 12px !important;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15) !important;
            z-index: 999999 !important;
            display: none !important;
            overflow: hidden !important;
        `;
        
        wrapper.innerHTML = `
            <div id="chatPanel" class="flex flex-col h-96 bg-white">
                <div class="flex items-center justify-between p-4 border-b bg-red-600 text-white">
                    <div class="font-semibold">Seoul Bot üå∂Ô∏è</div>
                    <div class="flex items-center gap-2">
                        <button id="voiceBtn" aria-label="Voice input" class="p-2 hover:bg-red-700 rounded-full transition-colors">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <button id="closeChat" aria-label="Close chat" class="p-2 hover:bg-red-700 rounded-full transition-colors">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div id="chatMessages" class="flex-1 p-4 overflow-auto bg-gray-50"></div>
                <div class="p-3 border-t bg-white">
                    <div class="flex gap-2">
                        <input id="chatInput" class="flex-1 px-4 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Nh·∫≠p tin nh·∫Øn..." />
                        <button id="sendButton" class="bg-red-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-red-700 transition-colors">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(wrapper);

        // Toggle functionality
        const panel = wrapper;
        const toggle = document.getElementById('chatToggle');
        const closeBtn = document.getElementById('closeChat');

        function showPanel() {
            panel.style.display = 'flex';
            toggle?.setAttribute('aria-expanded', 'true');
            setTimeout(() => {
                const input = document.getElementById('chatInput');
                input?.focus();
            }, 100);
        }

        function hidePanel() {
            panel.style.display = 'none';
            toggle?.setAttribute('aria-expanded', 'false');
        }

        toggle?.addEventListener('click', () => {
            if (panel.style.display === 'none' || !panel.style.display) {
                showPanel();
            } else {
                hidePanel();
            }
        });

        closeBtn?.addEventListener('click', hidePanel);

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && panel.style.display === 'flex') {
                hidePanel();
            }
        });

    } catch (err) {
        console.error('Chat widget error:', err);
    }
}

// Chat History
const chatHistory = {
    _buffer: [],
    _debouncedSave: null,

    saveMessage(message, sender) {
        try {
            this._buffer.push({ message, sender, timestamp: new Date().toISOString() });
            if (!this._debouncedSave) {
                this._debouncedSave = debounce(() => this._saveNow(), 1000);
            }
            this._debouncedSave();
        } catch (error) {
            console.error('Error saving chat:', error);
        }
    },

    _saveNow() {
        try {
            const existing = this.getHistory();
            const merged = existing.concat(this._buffer);
            localStorage.setItem('seoulkimchi_chatHistory', JSON.stringify(merged));
            this._buffer = [];
        } catch (error) {
            console.error('Error saving to localStorage:', error);
        }
    },

    getHistory() {
        try {
            const saved = localStorage.getItem('seoulkimchi_chatHistory');
            return saved ? JSON.parse(saved) : [];
        } catch (error) {
            return [];
        }
    },

    clearHistory() {
        try {
            localStorage.removeItem('seoulkimchi_chatHistory');
            this._buffer = [];
        } catch (error) {
            console.error('Error clearing history:', error);
        }
    }
};

// Match keywords
function matchKeywords(userMessage) {
    try {
        const lowerMsg = userMessage.toLowerCase();
        
        for (const [keywords, responses] of Object.entries(chatResponses)) {
            if (keywords === 'language') continue;
            
            const patterns = keywords.split('|');
            if (patterns.some(p => lowerMsg.includes(p.toLowerCase()))) {
                return responses[Math.floor(Math.random() * responses.length)];
            }
        }
        
        return `T√¥i ch∆∞a hi·ªÉu r√µ. ü§î\n\nC√¢u h·ªèi ph·ªï bi·∫øn:\n1Ô∏è‚É£ Xem s·∫£n ph·∫©m\n2Ô∏è‚É£ Ki·ªÉm tra gi√°\n3Ô∏è‚É£ Theo d√µi ƒë∆°n h√†ng\n4Ô∏è‚É£ G·ª£i √Ω m√≥n ngon\n\nHo·∫∑c g·ªçi 034 4100 374 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp!`;
    } catch (err) {
        console.error('matchKeywords error:', err);
        return null;
    }
}

// Send message
function sendChatMessage() {
    const input = DOM.chatInput || document.getElementById('chatInput');
    const message = input ? input.value.trim() : '';

    if (!message) return;

    addChatMessage(message, 'user');
    if (input) input.value = '';
    
    // Show typing
    const messagesDiv = DOM.chatMessages || document.getElementById('chatMessages');
    if (messagesDiv) {
        const typingDiv = document.createElement('div');
        typingDiv.id = 'typingIndicator';
        typingDiv.className = 'flex gap-2 mb-3';
        typingDiv.innerHTML = `
            <div class="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center text-white">
                <i class="fas fa-robot text-xs"></i>
            </div>
            <div class="bg-gray-200 rounded-lg px-4 py-2 text-sm">
                <span class="animate-pulse">‚óè</span>
                <span class="animate-pulse">‚óè</span>
                <span class="animate-pulse">‚óè</span>
            </div>
        `;
        messagesDiv.appendChild(typingDiv);
    }
    
    setTimeout(() => {
        document.getElementById('typingIndicator')?.remove();
        const response = matchKeywords(message);
        if (response) addChatMessage(response, 'bot');
    }, 800);
}

// Add message
function addChatMessage(text, sender) {
    const messagesDiv = DOM.chatMessages || document.getElementById('chatMessages');
    if (!messagesDiv) return;
    
    const msgDiv = document.createElement('div');
    msgDiv.className = sender === 'user' ? 'flex justify-end gap-2 mb-3' : 'flex gap-2 mb-3';
    
    if (sender === 'user') {
        msgDiv.innerHTML = `
            <div class="bg-red-600 text-white rounded-lg p-3 max-w-xs text-sm shadow">
                ${escapeHtml(text)}
                <div class="text-xs opacity-75 mt-1 text-right">${new Date().toLocaleTimeString()}</div>
            </div>
        `;
    } else {
        msgDiv.innerHTML = `
            <div class="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center text-white flex-shrink-0">
                <i class="fas fa-robot text-xs"></i>
            </div>
            <div class="bg-white border rounded-lg p-3 max-w-xs text-sm shadow">
                ${escapeHtml(text)}
                <div class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</div>
            </div>
        `;
    }
    
    messagesDiv.appendChild(msgDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    
    chatHistory.saveMessage(text, sender);
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Setup
function setupChatListeners() {
    const input = DOM.chatInput || document.getElementById('chatInput');
    const sendBtn = DOM.sendButton || document.getElementById('sendButton');
    
    if (input) {
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendChatMessage();
            }
        });
    }
    
    if (sendBtn) {
        sendBtn.addEventListener('click', sendChatMessage);
    }
}

// Toast notification
function showToast(msg) {
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 999999;
        animation: slideIn 0.3s ease;
    `;
    toast.innerHTML = `<div class="flex items-center gap-2">${msg}</div>`;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// Initialize
window.addEventListener('load', () => {
    ensureChatWidgetExists();
    cacheDOM();
    setupChatListeners();
    
    // Welcome message
    setTimeout(() => {
        addChatMessage('Xin ch√†o! üëã T√¥i l√† Seoul Bot. C·∫ßn gi√∫p g√¨ kh√¥ng?', 'bot');
    }, 500);
});

// Export for global use
window.sendChatMessage = sendChatMessage;
window.showToast = showToast;

console.log('‚úÖ Seoul Kimchi Chatbot Loaded (FIXED)');