import { CONTACT } from './config';
import { products } from '../data/products';

// Chatbot responses database
export const chatResponses = {
  'language': 'vi',
  
  'track|theo d√µi|ƒë∆°n h√†ng|tracking': [
    'üì¶ THEO D√ïI ƒê∆†N H√ÄNG:\nNh·∫≠p m√£ ƒë∆°n h√†ng (VD: SK12345)\nHo·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë·∫∑t h√†ng.',
    'üîç Ki·ªÉm tra ƒë∆°n h√†ng:\n1. M√£ ƒë∆°n\n2. SƒêT\n3. Email\nCh·ªçn c√°ch b·∫°n mu·ªën ki·ªÉm tra!'
  ],

  'g·ª£i √Ω|recommend|suggestion': [
    'üéØ G·ª¢I √ù CHO B·∫†N:\n1. M·ªõi d√πng: Kimchi C·∫£i Th·∫£o C·∫Øt\n2. Cay nh·∫π: Kimchi C·ªß C·∫£i\n3. ƒÇn li·ªÅn: Tteokbokki Cheese\nTh√≠ch lo·∫°i n√†o?',
    'üë®‚Äçüç≥ TOP B√ÅN CH·∫†Y:\n‚Ä¢ Kimchi C·∫£i Th·∫£o\n‚Ä¢ Tteokbokki Cheese\n‚Ä¢ ·ªöt B·ªôt H√†n Qu·ªëc\nMu·ªën t∆∞ v·∫•n chi ti·∫øt?'
  ],
  
  'xem s·∫£n ph·∫©m|s·∫£n ph·∫©m g√¨': [
    'üå∂Ô∏è Ch√∫ng t√¥i c√≥ 12 lo·∫°i s·∫£n ph·∫©m:\n‚Ä¢ Kimchi C·∫£i Th·∫£o (145K)\n‚Ä¢ Tteokbokki Cheese (110K)\n‚Ä¢ Gia v·ªã H√†n Qu·ªëc\nB·∫°n quan t√¢m lo·∫°i n√†o?',
    'S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t: Kimchi C·∫£i Th·∫£o C·∫Øt ü•¨\nGi√°: 145K | 100% t·ª± nhi√™n, HACCP'
  ],

  'gi√°|bao nhi√™u|price': [
    'üí∞ Gi√° kim chi t·ª´ 65K-155K\n‚Ä¢ Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn t·ª´ 500K\n‚Ä¢ Gi·∫£m 10% n·∫øu mua t·ª´ 3 l·ªç\nB·∫°n mu·ªën bi·∫øt s·∫£n ph·∫©m n√†o c·ª• th·ªÉ?',
    'Tteokbokki: 95-110K\nKimchi: 65-155K\nGia v·ªã: 65-85K\nLi√™n h·ªá ƒë·ªÉ bi·∫øt khuy·∫øn m√£i! üéâ'
  ],

  'giao h√†ng|ship|delivery': [
    'üöö Giao to√†n qu·ªëc 1-3 ng√†y\n‚Ä¢ Mi·ªÖn ph√≠ t·ª´ 500K\n‚Ä¢ H·ªó tr·ª£: GHN, GHTK, COD\n‚Ä¢ ƒê√≥ng g√≥i c·∫©n th·∫≠n, an to√†n',
    'ƒê·ªãa ch·ªâ giao c·ªßa b·∫°n l√† ·ªü ƒë√¢u? T√¥i s·∫Ω t√≠nh ph√≠ v·∫≠n chuy·ªÉn.'
  ],

  'li√™n h·ªá|phone|s·ªë ƒëi·ªán tho·∫°i': [
    `‚òéÔ∏è ${CONTACT.phoneDisplay} (VN)\nüì± ${CONTACT.phoneKoreaDisplay} (Korea)\nüìß ${CONTACT.email}\nüè¢ ${CONTACT.address}\nGi·ªù: ${CONTACT.hours}`,
    `Li√™n h·ªá t√¥i qua:\n‚Ä¢ Chat: Nh·∫Øn ·ªü ƒë√¢y\n‚Ä¢ Phone: ${CONTACT.phoneDisplay}\n‚Ä¢ Email: ${CONTACT.email}`
  ],

  's·ª©c kh·ªèe|health|l·ª£i √≠ch': [
    'üí™ L·ª£i √çch Kimchi:\n‚úÖ H·ªó tr·ª£ ti√™u h√≥a\n‚úÖ TƒÉng mi·ªÖn d·ªãch\n‚úÖ Gi√†u probiotics\n‚úÖ Ch·ªëng vi√™m\n‚úÖ B·∫£o v·ªá tim m·∫°ch',
    'Kimchi c√≥: Vitamin, Kho√°ng ch·∫•t, Probiotics\nT·ªët cho: ƒê∆∞·ªùng ru·ªôt, H·ªá mi·ªÖn d·ªãch, C√¢n n·∫∑ng'
  ],

  'ƒë·∫∑t h√†ng|order|mua': [
    `üõí C√°ch ƒë·∫∑t h√†ng:\n1Ô∏è‚É£ Ch·ªçn s·∫£n ph·∫©m\n2Ô∏è‚É£ G·ªçi ho·∫∑c nh·∫Øn\n3Ô∏è‚É£ X√°c nh·∫≠n ƒë∆°n\n4Ô∏è‚É£ Thanh to√°n\n5Ô∏è‚É£ Giao h√†ng\n\nüìû ${CONTACT.phoneDisplay}`,
    'B·∫°n mu·ªën ƒë·∫∑t bao nhi√™u s·∫£n ph·∫©m? T√¥i s·∫Ω t√≠nh ti·ªÅn cho b·∫°n!'
  ],

  'b·∫£o qu·∫£n|storage': [
    '‚ùÑÔ∏è B·∫£o qu·∫£n Kimchi:\n‚Ä¢ T·ªß l·∫°nh 2-8¬∞C: 2-3 th√°ng\n‚Ä¢ Nhi·ªát ƒë·ªô ph√≤ng: 1 th√°ng\n‚Ä¢ D√πng c√¥ng c·ª• s·∫°ch\n‚Ä¢ Kh√¥ng ƒë·ªÉ g·∫ßn th·ª±c ƒÉn kh√°c',
    'ƒê·ªÉ t·ªß l·∫°nh ngƒÉn m√°t, l·ªç ƒë√≥ng k√≠n. S·∫Ω t∆∞∆°i 2-3 th√°ng!'
  ],

  'ch·ª©ng nh·∫≠n|haccp|certificate': [
    'üèÜ Ch·ª©ng nh·∫≠n:\n‚úÖ HACCP CODEX 2020\n‚úÖ An to√†n th·ª±c ph·∫©m\n‚úÖ QCVN 01:2011/BYT\nT·∫•t c·∫£ t·ª´ B·ªô Y T·∫ø!',
    '100% s·∫£n ph·∫©m t·ª± nhi√™n, kh√¥ng h√≥a ch·∫•t t·ªïng h·ª£p'
  ],

  'ch√†o|hello|xin ch√†o': [
    'Xin ch√†o! üëã M√¨nh l√† Seoul Bot\nH·ªó tr·ª£ 24/7 - C√≥ g√¨ t√¥i c√≥ th·ªÉ gi√∫p?',
    'Ch√†o b·∫°n! üòä C·∫ßn gi√∫p g√¨ kh√¥ng?'
  ],

  'c·∫£m ∆°n|thanks|thank you': [
    'Kh√¥ng c√≥ g√¨! üòä C√≤n g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p?',
    'Vui l√≤ng! H·ªó tr·ª£ th√™m b·∫•t k·ª≥ l√∫c n√†o üí¨'
  ],

  't·∫°m bi·ªát|bye|goodbye': [
    'T·∫°m bi·ªát! üëã C·∫£m ∆°n ƒë√£ gh√© thƒÉm Seoul Kimchi üå∂Ô∏è',
    'H·∫πn g·∫∑p b·∫°n l·∫ßn sau! üòä'
  ]
};

/**
 * Get products by category or all products
 */
export function getProductsByCategory(category = null, limit = 3) {
  if (category) {
    return products.filter(p => p.category === category).slice(0, limit);
  }
  return products.slice(0, limit);
}

/**
 * Get featured products (with badge)
 */
export function getFeaturedProducts(limit = 3) {
  return products.filter(p => p.badge).slice(0, limit);
}

/**
 * Match keywords and return response with metadata
 */
export function matchKeywords(userMessage) {
  const lowerMsg = userMessage.toLowerCase();
  
  for (const [keywords, responses] of Object.entries(chatResponses)) {
    if (keywords === 'language') continue;
    
    const patterns = keywords.split('|');
    if (patterns.some(p => lowerMsg.includes(p.toLowerCase()))) {
      const responseText = responses[Math.floor(Math.random() * responses.length)];
      
      // Return response object with metadata for rich messages
      return {
        text: responseText,
        type: 'text',
        metadata: {}
      };
    }
  }
  
  // Check if asking about products - return with product cards
  if (lowerMsg.includes('s·∫£n ph·∫©m') || lowerMsg.includes('s·∫£n ph·∫©m g√¨') || lowerMsg.includes('xem s·∫£n ph·∫©m')) {
    const featuredProducts = getFeaturedProducts(3);
    return {
      text: 'üå∂Ô∏è S·∫£n ph·∫©m n·ªïi b·∫≠t c·ªßa ch√∫ng t√¥i:',
      type: 'products',
      metadata: {
        products: featuredProducts
      }
    };
  }
  
  // Check for specific product category
  if (lowerMsg.includes('kimchi') || lowerMsg.includes('kim chi')) {
    const kimchiProducts = getProductsByCategory('kimchi', 3);
    return {
      text: 'ü•¨ S·∫£n ph·∫©m Kimchi c·ªßa ch√∫ng t√¥i:',
      type: 'products',
      metadata: {
        products: kimchiProducts
      }
    };
  }
  
  if (lowerMsg.includes('tteokbokki') || lowerMsg.includes('tteok')) {
    const tteokProducts = getProductsByCategory('tteok', 3);
    return {
      text: 'üç° S·∫£n ph·∫©m Tteokbokki c·ªßa ch√∫ng t√¥i:',
      type: 'products',
      metadata: {
        products: tteokProducts
      }
    };
  }
  
  if (lowerMsg.includes('gia v·ªã') || lowerMsg.includes('seasoning') || lowerMsg.includes('b·ªôt')) {
    const spiceProducts = getProductsByCategory('seasonings', 3);
    return {
      text: 'üå∂Ô∏è Gia v·ªã H√†n Qu·ªëc c·ªßa ch√∫ng t√¥i:',
      type: 'products',
      metadata: {
        products: spiceProducts
      }
    };
  }
  
  // Default fallback
  return {
    text: `T√¥i ch∆∞a hi·ªÉu r√µ. ü§î\n\nC√¢u h·ªèi ph·ªï bi·∫øn:\n1Ô∏è‚É£ Xem s·∫£n ph·∫©m\n2Ô∏è‚É£ Ki·ªÉm tra gi√°\n3Ô∏è‚É£ Theo d√µi ƒë∆°n h√†ng\n4Ô∏è‚É£ G·ª£i √Ω m√≥n ngon\n\nHo·∫∑c g·ªçi ${CONTACT.phoneDisplay} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp!`,
    type: 'text',
    metadata: {}
  };
}

